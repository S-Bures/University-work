rating_data <- html_text(rating_data_web)
rating_data<-as.numeric(rating_data)
#Merging all list to a temporary dataframe
film_df <-data.frame(Rank = rank_data, Title = title_data,
Genre = genre_data,
Rating = rating_data)
#Appending it to global dataframe
final_df <- rbind(final_df, film_df)
}
View(film_df)
View(website)
library(rvest)
library(dplyr)
website <- "https://www.imdb.com/search/title/?sort=user_rating,desc&groups=top_250"
page <- read_html(website)
movie_titles <- page %>%
html_nodes("a h3.ipc-title__text") %>%
html_text()
movie_titles
page <- "https://www.imdb.com/chart/top/"
doc <- read_html(page)
title <- doc %>%
html_elements("li h3.ipc-title__text") %>%
html_text()
year <- doc %>%
html_elements(".sc-b189961a-8.kLaxqf.cli-title-metadata-item") %>%
html_text()
year <- as.numeric(year[seq(1,length(year),3)])
ratings <- doc %>%
html_elements(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating") %>%
html_text()
ratings <- as.numeric(str_extract(ratings,"[0-9]\\.[0-9]"))
imdb_top_25 <-tibble(
title=title,
year=year,
rating=ratings)
library(rvest)
library(stringr)
library(robotstxt)
library(tidyverse)
library(DT)
page <- "https://www.imdb.com/chart/top/"
doc <- read_html(page)
title <- doc %>%
html_elements("li h3.ipc-title__text") %>%
html_text()
year <- doc %>%
html_elements(".sc-b189961a-8.kLaxqf.cli-title-metadata-item") %>%
html_text()
year <- as.numeric(year[seq(1,length(year),3)])
ratings <- doc %>%
html_elements(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating") %>%
html_text()
ratings <- as.numeric(str_extract(ratings,"[0-9]\\.[0-9]"))
imdb_top_25 <-tibble(
title=title,
year=year,
rating=ratings)
page
doc
doc
title_all <- doc %>%
html_elements("ipc-title__text")
title_all
doc
title_all <- doc %>%
html_elements("ipc-title__text") %>%
html_text()
title_all
doc
title_all <- doc %>%
html_elements("li class")
html_text()
doc
title_all <- doc %>%
html_elements("li ipc-metadata-list-summary-item sc-10233bc-0 iherUv cli-parent")
html_text()
title_all
title_all <- doc %>%
html_elements("li ipc-metadata-list-summary-item sc-10233bc-0 iherUv cli-parent") %>%
html_text()
title_all
# Install and load the rvest package
install.packages("rvest")
install.packages("rvest")
library(rvest)
# Define the URL of the IMDb Top 250 page
url <- "https://www.imdb.com/chart/top/?ref_=nv_mv_250"
# Install and load the rvest package
library(rvest)
# Define the URL of the IMDb Top 250 page
url <- "https://www.imdb.com/chart/top/?ref_=nv_mv_250"
# Read the HTML content of the page
webpage <- read_html(url)
# Extract the titles of the movies
titles <- webpage %>%
html_nodes(".titleColumn a") %>%
html_text()
titles
# Extract the years of the movies
years <- webpage %>%
html_nodes(".titleColumn span.secondaryInfo") %>%
html_text() %>%
gsub("[()]", "", .) # Remove parentheses
# Extract the ratings of the movies
ratings <- webpage %>%
html_nodes(".imdbRating strong") %>%
html_text() %>%
as.numeric()
# Combine the extracted data into a data frame
top_250_movies <- data.frame(
Rank = 1:250,
Title = titles,
Year = as.numeric(years),
Rating = ratings,
stringsAsFactors = FALSE
)
# Print the first few rows of the data frame
head(top_250_movies)
years
ratings
page <- "https://www.imdb.com/chart/top/?ref_=nv_mv_250&start=26"
doc <- read_html(page)
title <- doc %>%
html_elements("li h3.ipc-title__text") %>%
html_text()
year <- doc %>%
html_elements(".sc-b189961a-8.kLaxqf.cli-title-metadata-item") %>%
html_text()
year <- as.numeric(year[seq(1,length(year),3)])
ratings <- doc %>%
html_elements(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating") %>%
html_text()
ratings <- as.numeric(str_extract(ratings,"[0-9]\\.[0-9]"))
imdb_top_25 <-tibble(
title=title,
year=year,
rating=ratings)
page <- "https://www.imdb.com/chart/top/?ref_=nv_mv_250&start=26"
doc <- read_html(page)
title <- doc %>%
html_elements("li h3.ipc-title__text") %>%
html_text()
year <- doc %>%
html_elements(".sc-b189961a-8.kLaxqf.cli-title-metadata-item") %>%
html_text()
year <- as.numeric(year[seq(1,length(year),3)])
ratings <- doc %>%
html_elements(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating") %>%
html_text()
#ratings <- as.numeric(str_extract(ratings,"[0-9]\\.[0-9]"))
imdb_top_25 <-tibble(
title=title,
year=year,
rating=ratings)
library(rvest)
library(stringr)
library(robotstxt)
library(tidyverse)
library(DT)
page <- "https://www.imdb.com/chart/top/?ref_=nv_mv_250&start=26"
doc <- read_html(page)
title <- doc %>%
html_elements("li h3.ipc-title__text") %>%
html_text()
year <- doc %>%
html_elements(".sc-b189961a-8.kLaxqf.cli-title-metadata-item") %>%
html_text()
year <- as.numeric(year[seq(1,length(year),3)])
ratings <- doc %>%
html_elements(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating") %>%
html_text()
#ratings <- as.numeric(str_extract(ratings,"[0-9]\\.[0-9]"))
imdb_top_25 <-tibble(
title=title,
year=year,
rating=ratings)
doc
imdb_top_25
page <- "https://www.imdb.com/chart/top/?ref_=nv_mv_250"
doc <- read_html(page)
title <- doc %>%
html_elements("li h3.ipc-title__text") %>%
html_text()
year <- doc %>%
html_elements(".sc-b189961a-8.kLaxqf.cli-title-metadata-item") %>%
html_text()
year <- as.numeric(year[seq(1,length(year),3)])
ratings <- doc %>%
html_elements(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating") %>%
html_text()
#ratings <- as.numeric(str_extract(ratings,"[0-9]\\.[0-9]"))
imdb_top_25 <-tibble(
title=title,
year=year,
rating=ratings)
imdb_top_25
library(rvest)
library(purrr)
library(tibble)
titles <- read_html('https://www.imdb.com/chart/top/?ref_=nv_mv_250') %>%
html_elements(".ipc-title__text") %>%
html_text() %>%
`[`(grepl("^\\d", .)) %>%
sub("^\\d+\\. ", "", .)
ylr <- read_html('https://www.imdb.com/chart/top/?ref_=nv_mv_250') %>%
html_elements(".sc-b0691f29-7.hrgukm.cli-title-metadata")
years <- map_chr(ylr, ~ html_elements(., "span")[1] %>% html_text())
durations <- map_chr(ylr, ~ html_elements(., "span")[2] %>% html_text())
ratings <- ylr %>%
map_chr(
~ ifelse(
length(html_elements(., "span")) == 3,
html_elements(., "span")[3] %>% html_text(),
NA_character_
)
)
tibble(
title = titles,
year = years,
duration = durations,
rating = ratings
)
titles <- read_html('https://www.imdb.com/chart/top/?ref_=nv_mv_250') %>%
html_elements(".ipc-title__text") %>%
html_text() %>%
`[`(grepl("^\\d", .)) %>%
sub("^\\d+\\. ", "", .)
titles
library(rvest)
library(dplyr)
website <- "https://www.imdb.com/search/title/?sort=user_rating,desc&groups=top_250"
page <- read_html(website)
movie_titles <- page %>%
html_nodes("a h3.ipc-title__text") %>%
html_text()
movie_titles
library(tidyverse)
library(rvest)
library(DT)
page <- read_html("https://scrapethissite.com/pages/simple/")
country <- page %>%
html_elements(".country-name") %>%
html_text(trim = TRUE)
head(country)
page %>%
html_elements(".country-info") %>%
html_text(trim = TRUE) %>%
head(n = 10)
capital <- page %>%
html_elements(".country-capital") %>%
html_text(trim = TRUE)
head(capital)
population <-  page %>%
html_elements(".country-population") %>%
html_text() %>%
as.numeric()
head(population)
population <-  page %>%
html_elements(".country-population") %>%
html_text() %>%
as.numeric()
head(population)
countries <- tibble(
country = country,
capital = capital,
population = population,
area = area
)
countries
countries <- tibble(
country = country,
capital = capital,
population = population,
area = area
)
library(tidyverse)
library(rvest)
library(DT)
page <- read_html("https://scrapethissite.com/pages/simple/")
country <- page %>%
html_elements(".country-name") %>%
html_text(trim = TRUE)
head(country)
page %>%
html_elements(".country-info") %>%
html_text(trim = TRUE) %>%
head(n = 10)
capital <- page %>%
html_elements(".country-capital") %>%
html_text(trim = TRUE)
head(capital)
population <-  page %>%
html_elements(".country-population") %>%
html_text() %>%
as.numeric()
head(population)
countries <- tibble(
country = country,
capital = capital,
population = population,
area = area
)
area <-  page %>%
html_elements(".country-area") %>%
html_text() %>%
as.numeric()
head(area)
countries <- tibble(
country = country,
capital = capital,
population = population,
area = area
)
countries
page <- "https://scrapethissite.com/pages/simple/" %>%
read_html()
countries_2 <- tibble(
Land = page %>%
html_elements(css = ".country-name") %>%
html_text(trim = TRUE),
capital = page %>%
html_elements(css = ".country-capital") %>%
html_text(),
population = page %>%
html_elements(css = ".country-population") %>%
html_text() %>%
as.numeric(),
area = page %>%
html_elements(css = ".country-area") %>%
html_text() %>%
as.numeric()
)
countries_2
ggplot(countries_2, aes(population, area)) %>%
geom_point()
ggplot(countries_2, mapping = aes(population, area)) %>%
geom_point()
ggplot(countries_2, mapping = aes(population, area)) +
geom_point()
nhl <- "https://www.scrapethissite.com/pages/forms/" %>%
read_html
nhl
page_2 <- "https://www.scrapethissite.com/pages/forms/" %>%
read_html
url <- "https://www.gov.scot/publications/coronavirus-covid-19-update-first-ministers-speech-26-october/"
speech_page <- read_html(url)
library(lubridate)
library(rvest)
url <- "https://www.gov.scot/publications/coronavirus-covid-19-update-first-ministers-speech-26-october/"
speech_page <- read_html(url)
title <- speech_page %>%
html_node(".article-header__title") %>%
html_text()
speech_page %>%
html_node(".content-data__list:nth-child(1) strong") %>%
html_text()
library(lubridate)
library(rvest)
url <- "https://www.gov.scot/publications/coronavirus-covid-19-update-first-ministers-speech-26-october/"
speech_page <- read_html(url)
title <- speech_page %>%
html_node(".article-header__title") %>%
html_text()
title
date <- speech_page %>%
html_node(".content-data__list:nth-child(1) strong") %>%
html_text() %>%
dmy()
date
title <- speech_page %>%
html_node(".article-header__title") %>%
html_text()
title
speech_page
speech_page <- read_html(url)
title <- speech_page %>%
html_node(".article-header__title") %>%
html_text()
title
speech_page %>%
html_node(".content-data__list:nth-child(1) strong") %>%
html_text()
date <- speech_page %>%
html_node(".content-data__list:nth-child(1) strong") %>%
html_text() %>%
dmy()
date
location <- speech_page %>%
html_node(".content-data__list+ .content-data__list strong") %>%
html_text()
location
abstract <- speech_page %>%
html_node(".leader--first-para p") %>%
html_text()
abstract
text <- speech_page %>%
html_nodes("#preamble p") %>%
html_text() %>%
list()
text
oct_26_speech <- tibble(
title    = title,
date     = date,
location = location,
abstract = abstract,
text     = text,
url      = url
)
library(tidyverse)
oct_26_speech <- tibble(
title    = title,
date     = date,
location = location,
abstract = abstract,
text     = text,
url      = url
)
oct_26_speech
all_speeches_page <- read_html("https://www.gov.scot/collections/first-ministers-speeches/")
all_speeches_page %>%
html_nodes(".collections-list a") %>%
html_attr("href")
covid_speech_urls <- all_speeches_page %>%
html_nodes(".collections-list a") %>%
html_attr("href") %>%
str_subset("covid-19") %>%
str_c("https://www.gov.scot", .)
covid_speech_urls
library(lubridate)
library(rvest)
library(tidyverse)
scrape_speech <- function(url) {
speech_page <- read_html(url)
title <- speech_page %>%
html_node(".ds_page-header__title") %>%
html_text()
date <- speech_page %>%
html_node("#sg-meta__publication-date") %>%
html_text() %>%
dmy()
location <- speech_page %>%
html_node(".ds_metadata__item:nth-child(5) strong") %>%
html_text()
abstract <- speech_page %>%
html_node(".ds_no-margin--bottom") %>%
html_text()
text <- speech_page %>%
html_nodes("#preamble p") %>%
html_text() %>%
list()
tibble(
title = title, date = date, location = location,
abstract = abstract, text = text, url = url
)
}
covid_speech_urls <- all_speeches_page %>%
html_nodes(".collections-list a") %>%
html_attr("href") %>%
str_subset("covid-19") %>%
str_c("https://www.gov.scot", .)
covid_speech_urls
covid_speeches <- map_dfr(covid_speech_urls, scrape_speech)
covid_speeches %>%
print(n = 10)
library(lubridate)
library(rvest)
library(tidyverse)
scrape_speech <- function(url) {
speech_page <- read_html(url)
title <- speech_page %>%
html_node(".ds_page-header__title") %>%
html_text()
date <- speech_page %>%
html_node("#sg-meta__publication-date") %>%
html_text() %>%
dmy()
location <- speech_page %>%
html_node(".ds_metadata__item:nth-child(5) strong") %>%
html_text()
abstract <- speech_page %>%
html_node(".ds_no-margin--bottom") %>%
html_text()
text <- speech_page %>%
html_nodes("#preamble p") %>%
html_text() %>%
list()
tibble(
title = title, date = date, location = location,
abstract = abstract, text = text, url = url
)
}
covid_speech_urls <- all_speeches_page %>%
html_nodes(".collections-list a") %>%
html_attr("href") %>%
str_subset("covid-19") %>%
str_c("https://www.gov.scot", .)
covid_speech_urls
covid_speeches <- map_dfr(covid_speech_urls, scrape_speech)
head(covid_speeches)
covid_speeches$text[0]
head(covid_speeches$text)
head(covid_speeches)
setwd("~/Uni/DWVT/Final project")
library(tidyverse)
setwd("~/Uni/DWVT/Final project")
dcbikeshare <- read_csv("dcbikeshare.csv")
dcbikeshare <- read_csv("dcbikeshare.csv")
head(dcbikeshare)
dcbikeshare$season
head(dcbikeshare$season)
head(dcbikeshare)
